#!/usr/bin/lua5.4
-- -*- mode: lua; -*-

local argparse = require "argparse"
local json = require "json"
local path = require "path"

require "lib.utils"
local registration = require "lib.registration"
local report = require "lib.report"
local birthday = require "lib.birthday"
local activity = require "lib.activity"

local parser = argparse("registrar", "Manage Agora's registrar duties")
parser:flag("-p", "Pretend: only show what would be done")

parser:command_target("command")

parser:command("monthly", "Generate and send registrar monthly report")
local weekly_cmd = parser:command("weekly", "Generate and send registrar weekly report")
weekly_cmd:flag("-p", "Pretend: generate and print only")

local birthday_cmd = parser:command("birthday", "Announce a player's birthday")
birthday_cmd:flag("-p", "Pretent: generate and print only.")
birthday_cmd:argument("name", "The name of the player")

local deregister_cmd = parser:command("deregister", "Deregister player")
deregister_cmd:argument("name", "The name of the player")
deregister_cmd:argument("date", "Time stamp of deregistration (seconds after epoch)")
   :convert(tonumber)
deregister_cmd:option("-m", "Message ID of deregistration (without 'message://' prefix)")

local register_cmd = parser:command("register", "Register player")
register_cmd:argument("name", "The name of the player")
register_cmd:argument("contact", "URL (or plain email address) to contact player")
register_cmd:argument("date", "Time stamp of registration (seconds after epoch)")
register_cmd:option("-m", "Message ID of registration (without 'message://' prefix)")

local birthday_cmd = parser:command("birthday", "Announce player's birthday")
birthday_cmd:argument("name", "The name of the player")

local activate_cmd = parser:command("activate", "Activate player")
activate_cmd:argument("name", "The name of the player")
activate_cmd:argument("when", "When they were activated (seconds after epoch)")
	:convert(tonumber)
activate_cmd:option("-m", "Message ID of activation (without 'message://' prefix)")

local deactivate_cmd = parser:command("deactivate", "Deactivate player")
deactivate_cmd:argument("name", "The name of the player")
deactivate_cmd:argument("when", "When they were deactivated (seconds after epoch)")
	:convert(tonumber)
deactivate_cmd:option("-m", "Message ID of deactivation (without 'message://' prefix)")

local rename_cmd = parser:command("rename", "Rename player")
rename_cmd:argument("who", "Current player name")
rename_cmd:argument("whither", "New player name")
rename_cmd:option("-m", "Message ID of renaming (without 'message://' prefix)")

local readdress_cmd = parser:command("readdress", "Change player's address")
readdress_cmd:argument("who", "Player to be readdressed")
readdress_cmd:argument("whither", "New address")
readdress_cmd:argument("when", "When the message was received")
readdress_cmd:option("-m", "Message ID of readdressing (without 'message://' prefix)")

-- Deserialize
local fns = {
	players = "players.json",
	log = "log.json"
}
local args = parser:parse()
local players = decodewith(json.decode, fns.players)
local log = decodewith(json.decode, fns.log)

-- Process

if args.command == "monthly" then
	report.monthly(args, players, log)
elseif args.command == "weekly" then
	report.weekly(args, players, log)
elseif args.command == "register" then
	registration.register(args, players, log)
elseif args.command == "deregister" then
	registration.deregister(args, players, log)
elseif args.command == "birthday" then
	birthday(args, players, log)
elseif args.command == "activate" then
	activity.activate(args, players, log)
elseif args.command == "deactivate" then
	activity.deactivate(args, players, log)
elseif args.command == "rename" then
   registration.rename(args, players, log)
elseif args.command == "readdress" then
   registration.readdress(args, players, log)
else
	io.write("Not implemented.")
end

-- Serialize
encodewith(json.encode, fns.players, players)
encodewith(json.encode, fns.log, log)
encodewith(json.encode, fns.log, log)

-- Do git stuff

local gitactions = {
	monthly = {
		files = {"archive/", "log.json"},
		message = function (args) return "Publish monthly report" end
	},
	weekly = {
		files = {"archive/", "log.json"},
		message = function (args) return "Publish weekly report" end
	},
	register = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Register %s", args.who) end
	},
	deregister = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Deregister %s", args.who) end
	},
	birthday = {
		files = {"archive/", "log.json"},
		message = function (args) return string.format("Announce %s's birthday", args.who) end
	},
	activate = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Make %s active", args.who) end
	},
	deactivate = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Make %s inactive", args.who) end
	},
	rename = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Rename %s to %s", args.who, args.whither) end
	},
	readdress = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Change %s's address", args.who) end
	}
}

-- if not args.p then
-- 	local action = gitactions[args.command]
-- 	for _,f in ipairs(action.files) do
-- 		os.execute(string.format("git add %s", f))
-- 	end
-- 	os.execute(string.format("git commit -m \"%s\"", action.message(args)))
-- end
