#!/usr/bin/lua5.4
-- -*- mode: lua; -*-

local argparse = require "argparse"
local json = require "json"
local path = require "path"

require "lib.utils"
local registration = require "lib.registration"
local report = require "lib.report"
local birthday = require "lib.birthday"
local activity = require "lib.activity"
local writ = require "lib.writ"

local parser = argparse("registrar", "Manage Agora's registrar duties")
parser:flag("-p", "Pretend: only show what would be done")

parser:command_target("command")

local cmd = {}

cmd.monthly = parser:    command  ("monthly", "Generate and send registrar monthly report")
cmd.weekly = parser:     command  ("weekly", "Generate and send registrar weekly report")
                                
cmd.birthday = parser:   command  ("birthday", "Announce a player's birthday")
cmd.birthday:            argument ("name", "The name of the player")
                                
cmd.deregister = parser: command  ("deregister", "Deregister player")
cmd.deregister:          argument ("name", "The name of the player")
cmd.deregister:          argument ("date", "Time stamp of deregistration (seconds after epoch)")       :convert(tonumber)
cmd.deregister:          argument ("reason", "Reason for deregistering")
	:choices(registration.reasons)
cmd.deregister:          option   ("-m", "Message ID of deregistration (without 'message://' prefix)")
                                
cmd.register = parser:   command  ("register", "Register player")
cmd.register:            argument ("name", "The name of the player")
cmd.register:            argument ("contact", "URL (or plain email address) to contact player")
cmd.register:            argument ("date", "Time stamp of registration (seconds after epoch)")         :convert(tonumber)
cmd.register:            option   ("-m", "Message ID of registration (without 'message://' prefix)")
                                
cmd.birthday = parser:   command  ("birthday", "Announce player's birthday")
cmd.birthday:            argument ("name", "The name of the player")
                                
cmd.activate = parser:   command  ("activate", "Activate player")
cmd.activate:            argument ("name", "The name of the player")
cmd.activate:            argument ("when", "When they were activated (seconds after epoch)")           :convert(tonumber)
cmd.activate:            option   ("-m", "Message ID of activation (without 'message://' prefix)")
                                
cmd.deactivate = parser: command  ("deactivate", "Deactivate player")
cmd.deactivate:          argument ("name", "The name of the player")
cmd.deactivate:          argument ("when", "When they were deactivated (seconds after epoch)")         :convert(tonumber)
cmd.deactivate:          option   ("-m", "Message ID of deactivation (without 'message://' prefix)")
                                
cmd.rename = parser:     command  ("rename", "Rename player")
cmd.rename:              argument ("who", "Current player name")
cmd.rename:              argument ("whither", "New player name")
cmd.rename:              option   ("-m", "Message ID of renaming (without 'message://' prefix)")
                                
cmd.readdress = parser:  command  ("readdress", "Change player's address")
cmd.readdress:           argument ("who", "Player to be readdressed")
cmd.readdress:           argument ("whither", "New address")
cmd.readdress:           argument ("when", "When the message was received")                            :convert(tonumber)
cmd.readdress:           option   ("-m", "Message ID of readdressing (without 'message://' prefix)")

cmd.writ = parser: command("writ", "Send a Writ of FAGE")
cmd.writ: argument("who", "Player that submited the Cantus Cygneus")
cmd.writ: argument("when", "Date of the message") :convert(tonumber)
cmd.writ: argument("cantus", "Path to file containing the Cantus Cygneus")
cmd.writ: option("-m", "Message ID of the cantus")

-- Deserialize
local fns = {
	players = "players.json",
	log = "log.json"
}

local args = parser:parse()
local players = decodewith(json.decode, fns.players)
local log = decodewith(json.decode, fns.log)

-- Process

if args.command == "monthly" then
	report.monthly(args, players, log)
elseif args.command == "weekly" then
	report.weekly(args, players, log)
elseif args.command == "register" then
	registration.register(args, players, log)
elseif args.command == "deregister" then
	registration.deregister(args, players, log)
elseif args.command == "birthday" then
	birthday(args, players, log)
elseif args.command == "activate" then
	activity.activate(args, players, log)
elseif args.command == "deactivate" then
	activity.deactivate(args, players, log)
elseif args.command == "rename" then
   registration.rename(args, players, log)
elseif args.command == "readdress" then
   registration.readdress(args, players, log)
elseif args.command == "writ" then
	writ(args, players, log)
else
	io.write("Unknown command.\n")
end

-- Serialize
encodewith(json.encode, fns.players, players)
encodewith(json.encode, fns.log, log)
jsonformat(fns.players)
jsonformat(fns.log)

-- Do git stuff

local gitactions = {
	monthly = {
		files = {"archive/", "log.json"},
		message = function (args) return "Publish monthly report" end
	},
	weekly = {
		files = {"archive/", "log.json"},
		message = function (args) return "Publish weekly report" end
	},
	register = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Register %s", args.who) end
	},
	deregister = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Deregister %s", args.who) end
	},
	birthday = {
		files = {"archive/", "log.json"},
		message = function (args) return string.format("Announce %s's birthday", args.who) end
	},
	activate = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Make %s active", args.who) end
	},
	deactivate = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Make %s inactive", args.who) end
	},
	rename = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Rename %s to %s", args.who, args.whither) end
	},
	readdress = {
		files = {"players.json", "log.json"},
		message = function (args) return string.format("Change %s's address", args.who) end
	}
}
